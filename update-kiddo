#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$SCRIPT_DIR/env/update-kiddo.env"

usage() {
  cat <<USAGE
Uso: update-kiddo <rama> [--restart]

Actualiza el repositorio configurado en el archivo de environment
utilizando la rama indicada. Si se especifica --restart, reinicia el
servicio tailscale ejecutando de nuevo "npm run tailscale".
USAGE
}

if [[ ${1-} == "-h" || ${1-} == "--help" ]]; then
  usage
  exit 0
fi

if [[ $# -lt 1 ]]; then
  echo "Error: debes indicar la rama a actualizar." >&2
  echo >&2
  usage >&2
  exit 1
fi

BRANCH=""
RESTART_SERVICE=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--restart)
      RESTART_SERVICE=true
      shift
      ;;
    -*)
      echo "Error: argumento no reconocido: $1" >&2
      echo >&2
      usage >&2
      exit 1
      ;;
    *)
      if [[ -n "$BRANCH" ]]; then
        echo "Error: rama duplicada: $1" >&2
        echo >&2
        usage >&2
        exit 1
      fi
      BRANCH="$1"
      shift
      ;;
  esac
done

if [[ -z "$BRANCH" ]]; then
  echo "Error: debes indicar la rama a actualizar." >&2
  echo >&2
  usage >&2
  exit 1
fi

if [[ ! -f "$ENV_FILE" ]]; then
  echo "Error: no se encontró el archivo de environment en $ENV_FILE" >&2
  exit 1
fi

# shellcheck source=/dev/null
source "$ENV_FILE"

if [[ -z "${SOURCE_REPOSITORY-}" ]]; then
  echo "Error: SOURCE_REPOSITORY no está definido en $ENV_FILE" >&2
  exit 1
fi

if [[ ! -d "$SOURCE_REPOSITORY" ]]; then
  echo "Error: el directorio $SOURCE_REPOSITORY no existe." >&2
  exit 1
fi

echo "Actualizando repositorio en $SOURCE_REPOSITORY..."

git -C "$SOURCE_REPOSITORY" fetch origin

echo "Aplicando git pull origin $BRANCH"

git -C "$SOURCE_REPOSITORY" checkout "$BRANCH"
git -C "$SOURCE_REPOSITORY" pull origin "$BRANCH"

echo "Repositorio actualizado correctamente."

if [[ "$RESTART_SERVICE" == true ]]; then
  PID_FILE="$SCRIPT_DIR/tailscale.pid"
  LOG_FILE="$SCRIPT_DIR/tailscale.log"
  echo "Reiniciando servicio tailscale..."

  if [[ -f "$PID_FILE" ]]; then
    PID_CONTENT="$(<"$PID_FILE")"
    if [[ "$PID_CONTENT" =~ ^[0-9]+$ ]]; then
      if kill "$PID_CONTENT" 2>/dev/null; then
        echo "Proceso tailscale detenido (PID $PID_CONTENT)."
        rm -f "$PID_FILE"
      else
        echo "Advertencia: no se pudo detener el proceso con PID $PID_CONTENT." >&2
      fi
    else
      echo "Advertencia: contenido inválido en $PID_FILE. Se iniciará el servicio nuevamente." >&2
      rm -f "$PID_FILE"
    fi
  else
    echo "Advertencia: no se encontró $PID_FILE. Se iniciará el servicio." >&2
  fi

  echo "Iniciando servicio tailscale en segundo plano..."
  (
    cd "$SOURCE_REPOSITORY"
    nohup npm run tailscale >>"$LOG_FILE" 2>&1 &
    echo "$!" >"$PID_FILE"
  )

  if [[ -f "$PID_FILE" ]]; then
    NEW_PID="$(<"$PID_FILE")"
    echo "Servicio tailscale iniciado (PID $NEW_PID)."
    echo "Los logs se guardan en $LOG_FILE."
  else
    echo "Advertencia: no se pudo registrar el PID del servicio tailscale." >&2
  fi
fi
