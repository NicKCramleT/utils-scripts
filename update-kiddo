#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$SCRIPT_DIR/env/update-kiddo.env"

usage() {
  cat <<USAGE
Uso: update-kiddo <rama> [--restart]

Actualiza el repositorio configurado en el archivo de environment
utilizando la rama indicada. Si se especifica --restart, reinicia el
servicio tailscale compilando y ejecutando los comandos definidos en el
archivo de environment.
USAGE
}

is_port_in_use() {
  local port="$1"

  if command -v ss >/dev/null 2>&1; then
    if ss -ltn | awk -v port="$port" 'NR > 1 { split($4, a, ":"); if (a[length(a)] == port) { found=1; exit } } END { exit !found }'; then
      return 0
    else
      return 1
    fi
  elif command -v netstat >/dev/null 2>&1; then
    if netstat -tuln | awk -v port="$port" 'NR > 2 { split($4, a, ":"); if (a[length(a)] == port) { found=1; exit } } END { exit !found }'; then
      return 0
    else
      return 1
    fi
  fi

  # Si no se encuentra ninguna herramienta adecuada, asumir que el puerto está libre
  return 1
}

if [[ ${1-} == "-h" || ${1-} == "--help" ]]; then
  usage
  exit 0
fi

if [[ $# -lt 1 ]]; then
  echo "Error: debes indicar la rama a actualizar." >&2
  echo >&2
  usage >&2
  exit 1
fi

BRANCH=""
RESTART_SERVICE=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    -r|--restart)
      RESTART_SERVICE=true
      shift
      ;;
    -*)
      echo "Error: argumento no reconocido: $1" >&2
      echo >&2
      usage >&2
      exit 1
      ;;
    *)
      if [[ -n "$BRANCH" ]]; then
        echo "Error: rama duplicada: $1" >&2
        echo >&2
        usage >&2
        exit 1
      fi
      BRANCH="$1"
      shift
      ;;
  esac
done

if [[ -z "$BRANCH" ]]; then
  echo "Error: debes indicar la rama a actualizar." >&2
  echo >&2
  usage >&2
  exit 1
fi

if [[ ! -f "$ENV_FILE" ]]; then
  echo "Error: no se encontró el archivo de environment en $ENV_FILE" >&2
  exit 1
fi

# shellcheck source=/dev/null
source "$ENV_FILE"

if [[ ${TAILSCALE_BUILD_COMMAND+x} ]]; then
  TAILSCALE_BUILD_COMMAND="$TAILSCALE_BUILD_COMMAND"
else
  TAILSCALE_BUILD_COMMAND="npm run build"
fi

TAILSCALE_START_COMMAND="${TAILSCALE_START_COMMAND:-npm run start}"

TAILSCALE_PORT="${TAILSCALE_PORT-}"

if [[ -n "$TAILSCALE_PORT" ]]; then
  if [[ ! "$TAILSCALE_PORT" =~ ^[0-9]+$ ]] || ((TAILSCALE_PORT < 1 || TAILSCALE_PORT > 65535)); then
    echo "Error: TAILSCALE_PORT debe ser un número entre 1 y 65535." >&2
    exit 1
  fi
fi

if [[ -z "$TAILSCALE_START_COMMAND" ]]; then
  echo "Error: TAILSCALE_START_COMMAND no está definido." >&2
  exit 1
fi

if [[ -z "${SOURCE_REPOSITORY-}" ]]; then
  echo "Error: SOURCE_REPOSITORY no está definido en $ENV_FILE" >&2
  exit 1
fi

if [[ ! -d "$SOURCE_REPOSITORY" ]]; then
  echo "Error: el directorio $SOURCE_REPOSITORY no existe." >&2
  exit 1
fi

echo "Actualizando repositorio en $SOURCE_REPOSITORY..."

git -C "$SOURCE_REPOSITORY" fetch origin

echo "Aplicando git pull origin $BRANCH"

git -C "$SOURCE_REPOSITORY" checkout "$BRANCH"
git -C "$SOURCE_REPOSITORY" pull origin "$BRANCH"

echo "Repositorio actualizado correctamente."

if [[ "$RESTART_SERVICE" == true ]]; then
  PID_FILE="$SOURCE_REPOSITORY/tailscale.pid"
  LOG_DIR="$SOURCE_REPOSITORY/logs"
  LOG_FILE="$LOG_DIR/tailscale.log"
  echo "Reiniciando servicio tailscale..."

  if [[ -f "$PID_FILE" ]]; then
    PID_CONTENT="$(<"$PID_FILE")"
    if [[ "$PID_CONTENT" =~ ^[0-9]+$ ]]; then
      if kill -9 "$PID_CONTENT" 2>/dev/null; then
        echo "Proceso tailscale detenido (PID $PID_CONTENT)."
        rm -f "$PID_FILE"
      else
        echo "Advertencia: no se pudo detener el proceso con PID $PID_CONTENT." >&2
        rm -f "$PID_FILE"
      fi
    else
      echo "Advertencia: contenido inválido en $PID_FILE. Se iniciará el servicio nuevamente." >&2
      rm -f "$PID_FILE"
    fi
  else
    echo "Advertencia: no se encontró $PID_FILE. Se iniciará el servicio." >&2
  fi

  if [[ -n "$TAILSCALE_BUILD_COMMAND" ]]; then
    echo "Compilando la aplicación con '$TAILSCALE_BUILD_COMMAND'..."
    (
      cd "$SOURCE_REPOSITORY"
      bash -lc "$TAILSCALE_BUILD_COMMAND"
    )
  else
    echo "Omitiendo la compilación porque TAILSCALE_BUILD_COMMAND está vacío."
  fi

  PORT_TO_USE=""
  if [[ -n "$TAILSCALE_PORT" ]]; then
    PORT_SEARCH_LIMIT="${TAILSCALE_PORT_SEARCH_LIMIT:-10}"

    if [[ ! "$PORT_SEARCH_LIMIT" =~ ^[0-9]+$ ]] || ((PORT_SEARCH_LIMIT < 1)); then
      echo "Error: TAILSCALE_PORT_SEARCH_LIMIT debe ser un número entero positivo." >&2
      exit 1
    fi

    PORT_CANDIDATE="$TAILSCALE_PORT"
    for ((offset = 0; offset < PORT_SEARCH_LIMIT; offset++)); do
      CURRENT_PORT=$((PORT_CANDIDATE + offset))

      if ((CURRENT_PORT > 65535)); then
        break
      fi

      if ! is_port_in_use "$CURRENT_PORT"; then
        PORT_TO_USE="$CURRENT_PORT"
        break
      fi
    done

    if [[ -z "$PORT_TO_USE" ]]; then
      echo "Error: no se encontró un puerto disponible comenzando desde $TAILSCALE_PORT en $PORT_SEARCH_LIMIT intentos." >&2
      exit 1
    fi

    if [[ "$PORT_TO_USE" != "$TAILSCALE_PORT" ]]; then
      echo "Advertencia: el puerto $TAILSCALE_PORT está en uso. Se utilizará el puerto disponible $PORT_TO_USE."
    else
      echo "Utilizando el puerto $PORT_TO_USE para iniciar el servicio tailscale."
    fi
  fi

  echo "Iniciando servicio tailscale en segundo plano con '$TAILSCALE_START_COMMAND'..."
  (
    cd "$SOURCE_REPOSITORY"
    mkdir -p "$LOG_DIR"
    if [[ -n "$PORT_TO_USE" ]]; then
      nohup bash -lc "PORT=$PORT_TO_USE $TAILSCALE_START_COMMAND" >>"$LOG_FILE" 2>&1 &
    else
      nohup bash -lc "$TAILSCALE_START_COMMAND" >>"$LOG_FILE" 2>&1 &
    fi
    echo "$!" >"$PID_FILE"
  )

  if [[ -f "$PID_FILE" ]]; then
    NEW_PID="$(<"$PID_FILE")"

    if [[ ! "$NEW_PID" =~ ^[0-9]+$ ]]; then
      echo "Error: el archivo $PID_FILE contiene un valor no numérico." >&2
      rm -f "$PID_FILE"
      exit 1
    fi

    echo "Servicio tailscale iniciado (PID $NEW_PID). Verificando estado..."
    sleep 2

    if kill -0 "$NEW_PID" 2>/dev/null; then
      echo "Servicio tailscale en ejecución. Los logs se guardan en $LOG_FILE."
    else
      echo "Error: el servicio tailscale finalizó inmediatamente después de iniciarse." >&2
      if [[ -f "$LOG_FILE" ]]; then
        echo "Últimas 40 líneas del log:" >&2
        tail -n 40 "$LOG_FILE" >&2 || true
      else
        echo "No se encontró el archivo de log $LOG_FILE." >&2
      fi
      exit 1
    fi
  else
    echo "Advertencia: no se pudo registrar el PID del servicio tailscale." >&2
  fi
fi
